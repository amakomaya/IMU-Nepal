<?phpnamespace App\Services\Reports;use App\Repositories\Reports\SafeMaternityProgramRepository;class SafeMaternityProgramService{    protected $repository;    public function __construct(SafeMaternityProgramRepository $repository)    {        $this->repository = $repository;    }    public function all($response)    {        $collection = $this->repository->ancCollection($response);        $deliveryCollection = $this->repository->deliveryCollection($response);        return [            'firstTimeAncVistedAgeLess20' => $this->countWomanWhoVisitAncAndAgeLessThan20($collection)['firstTimeAnc'],            'firstTimeAncVistedAgeGrater20' => $this->countWomanWhoVisitAncAndAgeGreaterThan20($collection)['firstTimeAnc'],            'AncVisitedAgeLess20FourthMonth' => $this->countWomanWhoVisitAncAndAgeLessThan20($collection)['forthMonth'],            'AncVisitedAgeGrater20FourthMonth' => $this->countWomanWhoVisitAncAndAgeGreaterThan20($collection)['forthMonth'],            'completedAllAncVisitLess20' => $this->countWomanWhoVisitAncAndAgeLessThan20($collection)['fourTimesAncVisit'],            'completedAllAncVisitGrater20' => $this->countWomanWhoVisitAncAndAgeGreaterThan20($collection)['fourTimesAncVisit'],            'singleChildMother' => $this->countDeliveryReport($deliveryCollection)['singleChildMother'],            'doubleChildMother' => $this->countDeliveryReport($deliveryCollection)['doubleChildMother'],            'tripleMoreChildMother' => $this->countDeliveryReport($deliveryCollection)['tripleMoreChildMother'],            'singleFemaleChild' => $this->countDeliveryReport($deliveryCollection)['singleFemaleChild'],            'doubleFemaleChild' => $this->countDeliveryReport($deliveryCollection)['doubleFemaleChild'],            'tripleMoreFemaleChild' => $this->countDeliveryReport($deliveryCollection)['tripleMoreFemaleChild'],            'singleMaleChild' => $this->countDeliveryReport($deliveryCollection)['singleMaleChild'],            'doubleMaleChild' => $this->countDeliveryReport($deliveryCollection)['doubleMaleChild'],            'tripleMoreMaleChild' => $this->countDeliveryReport($deliveryCollection)['tripleMoreMaleChild'],            'womenDeliveriedWithDoctorAtHealthFacility' => $this->countDeliveryWithDoctorAtHealthFacility($deliveryCollection),            'womenDeliveriedWithDoctorAtHome' => $this->countDeliveryWithDoctorAtHome($deliveryCollection),            'womenDeliveriedWithFchvAtHealthFacility' => 0,            'womenDeliveriedWithFchvAtHome' => 0,            'weightMore250gmBaby' => $this->countBabyWeight($deliveryCollection)['moreThan2500gm'],            'weightLess200to250gmBaby' => $this->countBabyWeight($deliveryCollection)['2000to2500gm'],            'weightLess200gmBaby' => $this->countBabyWeight($deliveryCollection)['lessThan2000gm'],            'cephalicNormal' => $this->countDeliveryType($deliveryCollection)['cephalicNormal'],            'shoulderNormal' => $this->countDeliveryType($deliveryCollection)['shoulderNormal'],            'breechNormal' => $this->countDeliveryType($deliveryCollection)['breechNormal'],            'cephalicVacuum_forcep' => $this->countDeliveryType($deliveryCollection)['cephalicVacuum_forcep'],            'shoulderVacuum_forcep' => $this->countDeliveryType($deliveryCollection)['shoulderVacuum_forcep'],            'breechVacuum_forcep' => $this->countDeliveryType($deliveryCollection)['breechVacuum_forcep'],            'cephalicCS' => $this->countDeliveryType($deliveryCollection)['cephalicCS'],            'shoulderCS' => $this->countDeliveryType($deliveryCollection)['shoulderCS'],            'breechCS' => $this->countDeliveryType($deliveryCollection)['breechCS'],            'deadFresh' => $this->countBabyDeath($deliveryCollection)['fresh'],            'deadMacerated' => $this->countBabyDeath($deliveryCollection)['macerated'],            'checkIn24hour' => 0,            'pncAll' => 0        ];    }    private function countWomanWhoVisitAncAndAgeLessThan20($collection)    {        $collectionAgeLessThan20 = $collection->filter(function ($value) {            return $value->age < 20;        });        $firstTime = $collectionAgeLessThan20->filter(function ($woman) {            if ($woman->first_time === 1 && $woman->second_visited_completed == 0 && $woman->third_visited_completed == 0 && $woman->forth_visited_completed==0) {                return $woman;            }        })->count();        $forthMonth = $collectionAgeLessThan20->filter(function ($woman) {            if ($woman->forth_month_visited === 1 && $woman->second_visited_completed == 0 && $woman->third_visited_completed == 0 && $woman->forth_visited_completed==0) {                return $woman;            }        })->count();        $fourTimesAncVisit = $collectionAgeLessThan20->filter(function ($woman) {            if ($woman->first_visited_completed == 1 &&                $woman->second_visited_completed == 1 &&                $woman->third_visited_completed == 1 &&                $woman->forth_visited_completed == 1) {                return $woman;            }        })->count();        return ['firstTimeAnc' => $firstTime,            'forthMonth' => $forthMonth,            'fourTimesAncVisit' => $fourTimesAncVisit];    }    private function countWomanWhoVisitAncAndAgeGreaterThan20($collection)    {        $collectionAgeMoreThan20 = $collection->filter(function ($data) {            return $data->age >= 20;        });        $firstTime = $collectionAgeMoreThan20->filter(function ($woman) {            if ($woman->first_time === 1 && $woman->second_visited_completed == 0 && $woman->third_visited_completed == 0 && $woman->forth_visited_completed==0) {                return $woman;            }        })->count();        $forthMonth = $collectionAgeMoreThan20->filter(function ($woman) {            if ($woman->forth_month_visited === 1 && $woman->second_visited_completed == 0 && $woman->third_visited_completed == 0 && $woman->forth_visited_completed==0) {                return $woman;            }        })->count();        $fourTimesAncVisit = $collectionAgeMoreThan20->filter(function ($woman) {            if ($woman->first_visited_completed == 1 &&                $woman->second_visited_completed == 1 &&                $woman->third_visited_completed == 1 &&                $woman->forth_visited_completed == 1) {                return $woman;            }        })->count();        return ['firstTimeAnc' => $firstTime,            'forthMonth' => $forthMonth,            'fourTimesAncVisit' => $fourTimesAncVisit];    }    private function countDeliveryReport($collection)    {        $collection->filter(function ($woman) {            $countBabyGenderFemale = 0;            $countBabyGenderMale = 0;            if (isset($woman->delivery)) {                if ($woman->delivery->baby->count() == 1) {                    $woman['delivery_report'] = 1;                    foreach ($woman->delivery->baby as $baby) {                        if ($baby->baby_alive == 'Alive') {                            if ($baby->gender == 'Male') {                                $countBabyGenderMale++;                            }                            if ($baby->gender == 'Female') {                                $countBabyGenderFemale++;                            }                        }                    }                } elseif ($woman->delivery->baby->count() == 2) {                    $woman['delivery_report'] = 2;                    foreach ($woman->delivery->baby as $baby) {                        if ($baby->baby_alive == 'Alive') {                            if ($baby->gender == 'Male') {                                $countBabyGenderMale++;                            }                            if ($baby->gender == 'Female') {                                $countBabyGenderFemale++;                            }                        }                    }                } elseif ($woman->delivery->baby->count() >= 3) {                    $woman['delivery_report'] = 3;                    foreach ($woman->delivery->baby as $baby) {                        if ($baby->baby_alive == 'Alive') {                            if ($baby->gender == 'Male') {                                $countBabyGenderMale++;                            }                            if ($baby->gender == 'Female') {                                $countBabyGenderFemale++;                            }                        }                    }                }            }            $woman['baby_gender_male'] = $countBabyGenderMale;            $woman['baby_gender_female'] = $countBabyGenderFemale;        });        return ['singleChildMother' => $collection->where('delivery_report', 1)->count(),            'doubleChildMother' => $collection->where('delivery_report', 2)->count(),            'tripleMoreChildMother' => $collection->where('delivery_report', 3)->count(),            'singleFemaleChild' => $collection->where('delivery_report', 1)->sum('baby_gender_female'),            'singleMaleChild' => $collection->where('delivery_report', 1)->sum('baby_gender_male'),            'doubleFemaleChild' => $collection->where('delivery_report', 2)->sum('baby_gender_female'),            'doubleMaleChild' => $collection->where('delivery_report', 2)->sum('baby_gender_male'),            'tripleMoreFemaleChild' => $collection->where('delivery_report', 3)->sum('baby_gender_female'),            'tripleMoreMaleChild' => $collection->where('delivery_report', 3)->sum('baby_gender_male')        ];    }    private function countDeliveryWithDoctorAtHealthFacility($collection)    {        return $collection->filter(function ($woman) {            if (isset($woman->deliveries)) {                if (                    $woman->deliveries->first()->delivery_place != 'Home' &&                    $woman->deliveries->first()->delivery_place != 'Others' &&                    $woman->deliveries->first()->delivery_place != 'Transit'                ) {                    return $woman;                }            }        })->count();    }    private function countDeliveryWithDoctorAtHome($collection)    {        return $collection->filter(function ($woman) {            if (isset($woman->deliveries)) {                if ($woman->deliveries->first()->delivery_place == 'Home') {                    return $woman;                }            }        })->count();    }    private function countBabyWeight($collection)    {        $countMoreThan2500gm = 0;        $countMoreThan2000gmAndLessThan2500 = 0;        $countLessThan2000gm = 0;        $collection->filter(function ($woman) use (&$countLessThan2000gm, &$countMoreThan2000gmAndLessThan2500, &$countMoreThan2500gm) {            if (isset($woman->delivery)) {                if ($woman->delivery->baby->count() >= 1) {                    foreach ($woman->delivery->baby as $baby) {                        if ($baby->baby_alive == 'Alive') {                            if ($baby->weight >= 2500) {                                $countMoreThan2500gm++;                            } elseif ($baby->weight >= 2000 && $baby->weight < 2500) {                                $countMoreThan2000gmAndLessThan2500++;                            } elseif ($baby->weight < 2000) {                                $countLessThan2000gm++;                            }                        }                    }                }            }        });        return ['moreThan2500gm' => $countMoreThan2500gm,            '2000to2500gm' => $countMoreThan2000gmAndLessThan2500,            'lessThan2000gm' => $countLessThan2000gm        ];    }    private function countDeliveryType($collection)    {        $cephalicNormal = $collection->filter(function ($woman) {            if (isset($woman->delivery)) {                if ($woman->delivery->presentation == 'Cephalic' && $woman->delivery->delivery_type == 'Normal') {                    return $woman;                }            }        })->count();        $shoulderNormal = $collection->filter(function ($woman) {            if (isset($woman->delivery)) {                if ($woman->delivery->presentation == 'Shoulder' && $woman->delivery->delivery_type == 'Normal') {                    return $woman;                }            }        })->count();        $breechNormal = $collection->filter(function ($woman) {            if (isset($woman->delivery)) {                if ($woman->delivery->presentation == 'Breech' && $woman->delivery->delivery_type == 'Normal') {                    return $woman;                }            }        })->count();        $cephalicVacuum_forcep = $collection->filter(function ($woman) {            if (isset($woman->delivery)) {                if ($woman->delivery->presentation == 'Cephalic' && $woman->delivery->delivery_type == 'Vacuum/Forcep') {                    return $woman;                }            }        })->count();        $shoulderVacuum_forcep = $collection->filter(function ($woman) {            if (isset($woman->delivery)) {                if ($woman->delivery->presentation == 'Shoulder' && $woman->delivery->delivery_type == 'Vacuum/Forcep') {                    return $woman;                }            }        })->count();        $breechVacuum_forcep = $collection->filter(function ($woman) {            if (isset($woman->delivery)) {                if ($woman->delivery->presentation == 'Breech' && $woman->delivery->delivery_type == 'Vacuum/Forcep') {                    return $woman;                }            }        })->count();        $cephalicCS = $collection->filter(function ($woman) {            if (isset($woman->delivery)) {                if ($woman->delivery->presentation == 'Cephalic' && $woman->delivery->delivery_type == 'C/S') {                    return $woman;                }            }        })->count();        $shoulderCS = $collection->filter(function ($woman) {            if (isset($woman->delivery)) {                if ($woman->delivery->presentation == 'Shoulder' && $woman->delivery->delivery_type == 'C/S') {                    return $woman;                }            }        })->count();        $breechCS = $collection->filter(function ($woman) {            if (isset($woman->delivery)) {                if ($woman->delivery->presentation == 'Breech' && $woman->delivery->delivery_type == 'C/S') {                    return $woman;                }            }        })->count();        return [            'cephalicNormal' => $cephalicNormal,            'shoulderNormal' => $shoulderNormal,            'breechNormal' => $breechNormal,            'cephalicVacuum_forcep' => $cephalicVacuum_forcep,            'shoulderVacuum_forcep' => $shoulderVacuum_forcep,            'breechVacuum_forcep' => $breechVacuum_forcep,            'cephalicCS' => $cephalicCS,            'shoulderCS' => $shoulderCS,            'breechCS' => $breechCS,        ];    }    private function countBabyDeath($collection)    {        $fresh = $collection->filter(function ($woman) {            foreach ($woman->delivery->baby()->isDeadFresh()->active()->get() as $baby) {                return $woman;            }        })->count();        $macerated = $collection->filter(function ($woman) {            foreach ($woman->delivery->baby()->isDeadMacerated()->active()->get() as $baby) {                return $woman;            }        })->count();        return [            'fresh' => $fresh,            'macerated' => $macerated        ];    }}